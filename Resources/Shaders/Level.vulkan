
{{vertex}}

#version 450

layout(binding=0) uniform VertexUniforms {
    mat4 modelMatrix;
    mat4 viewMatrix;
    mat4 projectionMatrix;
    mat3 normalMatrix;
    vec3 lightPosition;
} vertexUniforms;

layout(location=0) in vec3 in_position;
layout(location=1) in vec3 in_normal;
layout(location=2) in vec2 in_texCoord;

layout(location=0) out vec3 out_normal;
layout(location=1) out vec3 out_lightDirection;
layout(location=2) out vec2 out_texCoord;

void main()
{
    vec4 position = vertexUniforms.modelMatrix * vec4(in_position, 1.0);

    gl_Position = vertexUniforms.projectionMatrix * vertexUniforms.viewMatrix * position;
    out_normal = vertexUniforms.normalMatrix * in_normal;
    out_lightDirection = vertexUniforms.lightPosition - vec3(position);
    out_texCoord = in_texCoord;
}


{{fragment}}

#version 450

/* FIXME
layout(binding=0) uniform FragmentUniforms {
    vec4 ambientColor;
} fragmentUniforms;
*/

layout(binding=1) uniform sampler2D textureSampler;

layout(location=0) in vec3 in_normal;
layout(location=1) in vec3 in_lightDirection;
layout(location=2) in vec2 in_texCoord;

layout(location=0) out vec4 out_color;

void main()
{
    vec4 color = texture(textureSampler, in_texCoord) * vec4(1.0, 1.0, 0.7, 1.0);

    vec3 lightDirection = in_lightDirection;
    float lightDistance = length(lightDirection);
    lightDirection /= lightDistance;

    float intensity = clamp(dot(normalize(in_normal), lightDirection), 0, 1);
    float attenuation = 0.5 * lightDistance;
    intensity = min(intensity / attenuation, 1.2);

    out_color = max(intensity * color, /*FIXME uniforms.ambientColor*/vec4(0, 0, 0, 0));
}
