
{{vertex}}

#version 450

layout(binding=0) uniform VertexUniforms {
    mat4 modelMatrix;
    mat4 viewMatrix;
    mat4 projectionMatrix;
    mat3 normalMatrix;
    vec3 lightPosition;
} vertexUniforms;

layout(location=0) in vec3 in_position;
layout(location=1) in vec3 in_normal;
layout(location=2) in vec3 in_tangent;
layout(location=3) in vec3 in_bitangent;
layout(location=4) in vec2 in_texCoord;

layout(location=0) out vec3 out_normal;
layout(location=1) out vec3 out_lightDirection;
layout(location=2) out float out_lightDistance;
layout(location=3) out vec2 out_texCoord;

void main()
{
    vec4 position = vertexUniforms.modelMatrix * vec4(in_position, 1.0);

    vec3 tangent = normalize(vertexUniforms.normalMatrix * in_tangent);
    vec3 bitangent = normalize(vertexUniforms.normalMatrix * in_bitangent);
    vec3 normal = normalize(vertexUniforms.normalMatrix * in_normal);
    mat3 tbn = mat3(
            vec3(tangent.x, bitangent.x, normal.x),
            vec3(tangent.y, bitangent.y, normal.y),
            vec3(tangent.z, bitangent.z, normal.z)
        );

    vec3 lightDirection = vertexUniforms.lightPosition - vec3(position);
    float lightDistance = length(lightDirection);
    lightDirection /= lightDistance;

    gl_Position = vertexUniforms.projectionMatrix * vertexUniforms.viewMatrix * position;
    out_normal = tbn * normal;
    out_lightDirection = tbn * lightDirection;
    out_lightDistance = lightDistance;
    out_texCoord = in_texCoord;
}


{{fragment}}

#version 450

layout(binding=0) uniform FragmentUniforms {
    vec4 ambientColor;
} fragmentUniforms;

layout(location=0) in vec3 in_normal;
layout(location=1) in vec3 in_lightDirection;
layout(location=2) in float in_lightDistance;
layout(location=3) in vec2 in_texCoord;

layout(location=0) out vec4 out_color;

/*
fragment float4 fragmentShader(
    texture2d<float> texture [[texture(0)]],
    texture2d<float> normalMap [[texture(1)]],
    )
*/

void main()
{
    /*
    constexpr sampler textureSampler(mag_filter::linear, min_filter::linear);
    float4 color = texture.sample(textureSampler, in.texCoord);
    float3 normal = normalize(normalMap.sample(textureSampler, in.texCoord).rgb * 2.0 - 1.0);

    float intensity = saturate(dot(normal, normalize(in.lightDirection)));
    float attenuation = 0.5 * in.lightDistance;
    intensity = min(intensity / attenuation, 1.2);

    return max(intensity * color, uniforms.ambientColor);
    */

    out_color = vec4(in_normal, 1.0);
}
